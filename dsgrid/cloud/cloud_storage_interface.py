import abc
from contextlib import contextmanager


class CloudStorageInterface(abc.ABC):
    """Defines interface to synchronize data stored on a cloud storage system."""

    @abc.abstractmethod
    def check_lock_file(self, path):
        """Checks if a given lock file path exists and that it was created by the same username and uuid.

        Returns an error if the existing lock file's username and uuid do not match.

        Parameters
        ----------
        path : str
            Lock file path

        Raises
        ------
        DSGRegistryLockError
            exception is raised if any lock files are found
        """

    @abc.abstractmethod
    def check_valid_lock_file(self, path):
        """Checks if a given lock file path is valid. Returns errors if invalid.

        Parameters
        ----------
        path : str
            Lock file path
        """

    @abc.abstractmethod
    def get_lock_files(self, relative_path=None):
        """Returns a generator of lock files within the /.locks directory (non-recursive).

        Parameters
        ----------
        relative_path : str
            Relative path to search for lock files in. By default, None.
        """

    @abc.abstractmethod
    def has_lock_files(self):
        """Returns True if a .lock file exists within the /.locks directory."""

    @abc.abstractmethod
    @contextmanager
    def make_lock_file_managed(self, path):
        """Context manager to make a lock file given the file path. On close, it removes the lock file.

        Parameters
        ----------
        path : str
            Lock file path

        Raises
        ------
        DSGRegistryLockError
            Raises a registry lock error if a registry.lock already exists
        """

    @abc.abstractmethod
    def make_lock_file(self, path):
        """Make a lock file given the file path.

        Parameters
        ----------
        path : str
            Lock file path

        Raises
        ------
        DSGRegistryLockError
            Raises a registry lock error if a registry.lock already exists
        """

    @abc.abstractmethod
    def read_lock_file(self, path):
        """Reads a lock file and returns a dictionary of its contents.

        Parameters
        ----------
        path : str
            Lock file path
        """

    @abc.abstractmethod
    def remove_lock_file(self, path, force=False):
        """Remove a lock file.

        Parameters
        ----------
        path : str
            Lock file path
        force : bool
            Boolean flag to force removal of lock file that does not have the same UUID or username, by default False

        Raises
        ------
        DSGRegistryLockError
            Raises a registry lock error if a registry.lock already exists and is was generated by a different user or different UUID (if force==False).
        """

    @abc.abstractmethod
    def sync_pull(self, remote_path, local_path, exclude=None, delete_local=False, is_file=False):
        """Synchronize data from remote_path to local_path.
        If delete_local is True, this deletes any files in local_path that do not exist in remote_path.

        Parameters
        ----------
        remote_path : str
            Remote registry path
        local_path : str
            Local registry path
        delete_local : bool, optional
            If true, this method deletes files and directories that exist in the local_path but not in the remote_path
        exclude : list, optional
            List of patterns to exclude, by default None.
            If excluding whole directories, the exclusion must end with /* , e.g. data/*
        is_file : bool, optional
            If the path is a file (not a registry). By default False.
        """

    @abc.abstractmethod
    def sync_push(self, remote_path, local_path, exclude=None):
        """Synchronize data from local path to remote_path

        Parameters
        ----------
        remote_path : str
            Remote registry path
        local_path : str
            Local registry path
        exclude : list, optional
            List of patterns to exclude, by default None.
            If excluding whole directories, the exclusion must end with /* , e.g. data/*
        """
